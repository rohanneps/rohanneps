"""
Django settings for rest_image_match_server project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from helpers import helper


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'gj@52pn@4k@$=rg$j4vg(^diw5208pp^0_h$-5@-q+fc50$wee'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',   # rest framework

    # custom apps
    'project',
    'search',
    'client',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rest_image_match_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rest_image_match_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'RND_RESTWEBSERVICE',
        'USER': 'root',
        'PASSWORD':'rohan1234',
        'HOST': 'localhost',
        'PORT' : '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGER_LIST = ['project','core','helpers','search','client']

LOGGER_CONTENT= {
            'handlers': ['file_handler','console'],
            'level': 'DEBUG',
            'propagate': True,
        }

# Logging details
helper.create_dir(os.path.join(BASE_DIR,'logs'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'server_format': {
            # 'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            #'format': '[%(asctime)s] [%(levelname)s] %(name)s %(user)s_%(session_id)s:-> %(message)s',
            'format': '[%(asctime)s] [%(levelname)s] [%(name)s] [PID:%(process)d_%(thread)d]--> %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'console_format': {
            'format': '[%(asctime)s]: %(levelname)s: [%(name)s]-> %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },

    },
    'handlers': {
        'file_handler': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR,'logs','productmatchingserver_rest.log'),
            'maxBytes': 1024*1024*15,            #15 MB
            'formatter': 'server_format',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'console_format'
        },

    },
    'loggers': { logger:LOGGER_CONTENT for logger in LOGGER_LIST}
}


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    ]
STATIC_ROOT = os.path.join(BASE_DIR, "static_cdn")


REST_FRAMEWORK = {
        # 'DEFAULT_AUTHENTICATION_CLASSES': (
        #         'rest_framework.authentication.BasicAuthentication',
        #         'rest_framework.authentication.SessionAuthentication',
        # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
        'DEFAULT_RENDERER_CLASSES': (
            'rest_framework.renderers.JSONRenderer',
            'rest_framework.renderers.BrowsableAPIRenderer',
    )
    }

##############################################################################
"""
Project Progress Phase Status List
"""
PROJECT_PROCESS_STATUS_DICT = {
    '1' : 'Image Downloading',
    '2' : 'ImageNet Classification',
    '3' : 'Color Classification',
    '4' : 'Price Comparison',
    '5' : 'Text Comparison',
    '6' : 'Merger',
    '7' : 'Completion'
}
##############################################################################

##############################################################################
"""
Project Status List
"""
PROJECT_STATUS_LIST = (
        ('Pending', 'Pending'),
        ('InProgress', 'InProgress'),
        ('Completed', 'Completed'),
        ('Failed', 'Failed'),
        ('Terminated','Terminated'),
        ('H_InProgress', 'H_InProgress'),
        ('H_Completed', 'H_Completed'),
    )
##############################################################################
"""
Project Files and Folders
"""
PROJECT_DIR = os.path.join(BASE_DIR,'process')
helper.create_dir(PROJECT_DIR)

PROJECT_IMAGES_DOWNLOAD_THREADS = 20
PROJECT_INPUT_FOLDER = 'input'
PROJECT_IMAGES_FOLDER = 'images'
PROJECT_STEP_FOLDER = 'stages'
PROJECT_HTML_FOLDER = 'html'
DEFAULT_IMAGE_SHAPE = (128, 128) 
PROJECT_STEP_FOLDER_0 = 'Step0'
PROJECT_STEP_FILE_0 = 'requiredFields.tsv'
PROJECT_STEP_FOLDER_1 = 'Step1'
PROJECT_STEP_FILE_1_SEARCH = 'conf_vgg19_search.tsv'
PROJECT_STEP_FILE_1_RESULT = 'conf_vgg19_result.tsv'
PROJECT_STEP_FILE_1 = 'conf_vgg19.tsv'
PROJECT_STEP_FOLDER_2 = 'Step2'
PROJECT_STEP_FILE_2 = 'conf_color.tsv'
PROJECT_STEP_FOLDER_3 = 'Step3'
PROJECT_STEP_FILE_3 = ''
PROJECT_STEP_FOLDER_4 = 'Step4'
PROJECT_STEP_FILE_4 = 'conf_price_diff.tsv'
PROJECT_STEP_FOLDER_5 = 'Step5'
PROJECT_STEP_FILE_5 = 'conf_text.tsv'
PROJECT_STEP_FOLDER_6 = 'Step6'
PROJECT_STEP_FILE_6 = 'conf_image_text_price.tsv'
PROJECT_STEP_FOLDER_7 = 'Step7'
PROJECT_STEP_FILE_7 = 'final_conf_matrix_{}.tsv'
PROJECT_HTML_FILE = '{}.html'

PROJET_SEARCH_IMAGES_FOLDER = 'search'
PROJET_RESULT_IMAGES_FOLDER = 'result'
PROJECT_RESULT_IMAGE_MAPPER = 'result_image_mapper.tsv'

##############################################################################
"""
CNN model file locations
"""

COLOR_MODEL_PATH = os.path.join(BASE_DIR,'cnn_models','google_color_model.h5')
COLOR_LABEL_LISTING_FILE = os.path.join(BASE_DIR,'cnn_models','ColorLabelListing.tsv')

VGG19_MODEL_PATH = os.path.join(BASE_DIR,'cnn_models','vgg19_weights_tf_dim_ordering_tf_kernels.h5')

MATCH_LOWER_THRESHOLD = 2.5
##############################################################################
# CELERY SETTINGS
CELERY_BROKER_URL = 'redis://localhost'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
##############################################################################

# FTP HEADERS
FTP_LOCATION = '192.168.11.5'
FTP_USER = 'rmali'
FTP_PASS = 'm3R@ke$h'
##############################################################################

# PAGINATION SETTINGS
PAGINATION_PAGESIZE = 10
##############################################################################
# ELATICSEARCH SETTINGS
from elasticsearch import Elasticsearch

ES_HOST = 'localhost'
ES_PORT = 9200
ES_COMPUTED_RESULT_INDEX = 'testrest'
ES = Elasticsearch([{'host':ES_HOST, 'port':ES_PORT}])

ES_INDEX_LIST = (list(ES.indices.get_alias("*").keys()))

# Creation of insert index if not present
if ES_COMPUTED_RESULT_INDEX not in ES_INDEX_LIST:
    from helpers import es_helper
    ES.indices.create(ES_COMPUTED_RESULT_INDEX)
    es_helper.create_index_mapping(ES_COMPUTED_RESULT_INDEX)

##############################################################################