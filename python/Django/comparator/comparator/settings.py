"""
Django settings for comparator project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3dev&p*d+9(*t69)%pk=^j(20@g4f7*ks3acqiz4=_a2o&%@me'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'engine.apps.EngineConfig',
    'comparator.apps.ComparatorConfig',
    'project.apps.ProjectConfig',
    'history.apps.HistoryConfig',
    'crispy_forms',
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]


# For django-debug-tool
INTERNAL_IPS = ('127.0.0.1',)

ROOT_URLCONF = 'comparator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'comparator.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'comparator',
        'USER': 'root',
        'PASSWORD': 'rohan123',
        'HOST': 'localhost',
        'PORT' : '3306',
    }
}
CONN_MAX_AGE = 3000
LOGGER_LIST = ['engine','history','project','django','core']

LOGGER_CONTENT= {
            'handlers': ['file_handler','console'],
            'level': 'DEBUG',
            'propagate': True,
        }

# Logging details
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'server_format': {
            # 'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            #'format': '[%(asctime)s] [%(levelname)s] %(name)s %(user)s_%(session_id)s:-> %(message)s',
            'format': '[%(asctime)s] [%(levelname)s] [%(name)s] [PID:%(process)d_%(thread)d]--> %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'console_format': {
            'format': '[%(asctime)s]: %(levelname)s-> %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },

    },
    'handlers': {
        'file_handler': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR,'logs','comparator.log'),
            'maxBytes': 1024*1024*5,            #5 MB
            'formatter': 'server_format',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'console_format'
        },

    },
    'loggers': { logger:LOGGER_CONTENT for logger in LOGGER_LIST}
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
# TEMPLATE_DIRS =  (
#     os.path.join(BASE_DIR,'templates/'),
#     )
# print TEMPLATE_DIRS
STATIC_ROOT = os.path.join(BASE_DIR,'')
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR,'static'),
)

LOGIN_REDIRECT_URL = '/'
LOGIN_URL ='/login/'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

CRISPY_TEMPLATE_PACK = 'bootstrap3'

MEDIA_ROOT = os.path.join(BASE_DIR,'media')
MEDIA_URL = '/media/'

OUTPUT_ROOT = os.path.join(BASE_DIR,'Comparator_Output')

# CELERY STUFF
BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# email
# copy email_creds_back.py to email_creds.py and set USER & PASS for ur gmail account
from email_creds_back import USER, PASSWORD

EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = USER
EMAIL_HOST_PASSWORD = PASSWORD
EMAIL_PORT = 587

from .celery_cron_file_deleter import crontab

# supervisord
# after code change: supervisroctl restart comparatord
# run using
# celery -A comparator worker --loglevel=info --beat

# view log
# tail -f logs/celery_supervisor.log

CELERYBEAT_SCHEDULE = {
    'every-minute': {
        'task': 'tasks.file_deleter',
        'schedule': crontab(hour="0", minute="0")
    }
}
